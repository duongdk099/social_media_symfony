{% extends 'base.html.twig' %}

{% block title %}
    {{ post.title }} - Post
{% endblock %}

{% block content %}
    <div class="max-w-2xl mx-auto mt-6 space-y-4 mb-6">

        <!-- Post Details -->
        <div class="bg-white shadow-md rounded-lg p-4">
            <h1 class="text-2xl font-bold">{{ post.title }}</h1>
            <p class="text-gray-800 mt-2">{{ post.content }}</p>
            <p class="text-sm text-gray-500 mt-1">
                Posted by
                <a href="{{ path('app_user_show', { 'id': post.user.id }) }}" class="text-blue-600 hover:underline">{{ post.user.username }}</a>
                in
                <a href="{{ path('app_subworld_show', { 'id': post.subworld.id }) }}" class="text-blue-600 hover:underline">{{ post.subworld.name }}</a>
                · {{ post.createdAt|date("F j, Y") }}
            </p>
        </div>

        <!-- Add Comment Section -->
        <div class="bg-gray-100 shadow-md rounded-lg p-3">
            <div id="commentBox">
                <input type="text" id="commentInput" placeholder="Add a comment..." 
                    class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-300 cursor-pointer" 
                    readonly onclick="handleCommentClick()">
            </div>

            <div id="expandedComment" class="hidden">
                <textarea id="commentTextarea" rows="3" 
                    class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-300"></textarea>
                <div class="flex justify-end mt-2">
                    <button onclick="hideCommentArea()" 
                        class="px-4 py-1 bg-gray-400 text-white rounded-lg mr-2">Cancel</button>
                    <button onclick="submitComment()" id="commentButton" 
                        class="px-4 py-1 bg-blue-600 text-white rounded-lg flex items-center">
                        <span>Comment</span>
                        <svg id="loadingSpinner" class="hidden ml-2 w-4 h-4 animate-spin" 
                            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <!-- Comments Section -->
        <h2 class="text-xl font-semibold mt-6">Comments</h2>

        <div id="commentsContainer">
            {% for comment in comments|sort((a, b) => b.createdAt <=> a.createdAt) %}
                <div class="bg-gray-100 shadow-md rounded-lg p-3 comment mt-2">
                    <p class="text-sm text-gray-600">
                        <a href="{{ path('app_user_show', { 'id': comment.user_id }) }}" 
                            class="text-blue-600 hover:underline">{{ comment.author }}</a>
                        · {{ comment.createdAt|date("F j, Y H:i") }}
                    </p>
                    <p class="text-gray-800 mt-1">{{ comment.content }}</p>
                </div>
            {% else %}
                <p class="text-gray-500">No comments yet.</p>
            {% endfor %}
        </div>

    </div>

    <!-- JavaScript -->
    <script>
        function handleCommentClick() {
            const token = localStorage.getItem("jwt_token");
            if (!token) {
                // Save current post URL in sessionStorage
                sessionStorage.setItem("redirect_after_login", window.location.href);
                window.location.href = "/api/auth/login"; // Redirect to login page
                return;
            }
            showCommentArea();
        }

        function showCommentArea() {
            document.getElementById("commentBox").classList.add("hidden");
            document.getElementById("expandedComment").classList.remove("hidden");
        }

        function hideCommentArea() {
            document.getElementById("commentTextarea").value = "";
            document.getElementById("commentBox").classList.remove("hidden");
            document.getElementById("expandedComment").classList.add("hidden");
        }

        async function submitComment() {
            const content = document.getElementById("commentTextarea").value.trim();
            if (!content) {
                alert("Comment cannot be empty!");
                return;
            }

            const token = localStorage.getItem("jwt_token");
            if (!token) {
                alert("You must be logged in to comment!");
                return;
            }

            const commentButton = document.getElementById("commentButton");
            const spinner = document.getElementById("loadingSpinner");

            // Show spinner
            commentButton.disabled = true;
            spinner.classList.remove("hidden");

            try {
                const response = await fetch("/api/comments/create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + token
                    },
                    body: JSON.stringify({
                        post_id: {{ post.id }},
                        content: content
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    // Create comment HTML and insert at the top
                    const commentHTML = `
                        <div class="bg-gray-100 shadow-md rounded-lg p-3 comment mt-2">
                            <p class="text-sm text-gray-600">
                                <a href="/user/${data.user.id}" class="text-blue-600 hover:underline">${data.user.username}</a>
                                · ${new Date().toLocaleString()}
                            </p>
                            <p class="text-gray-800 mt-1">${data.content}</p>
                        </div>
                    `;
                    document.getElementById("commentsContainer").insertAdjacentHTML("afterbegin", commentHTML);

                    // Reset the comment input
                    hideCommentArea();
                } else {
                    alert(data.error || "Failed to post comment");
                }
            } catch (error) {
                alert("An error occurred. Please try again.");
            } finally {
                // Hide spinner
                commentButton.disabled = false;
                spinner.classList.add("hidden");
            }
        }

        // Check if there's a post login redirection
        document.addEventListener("DOMContentLoaded", function () {
            const redirectURL = sessionStorage.getItem("redirect_after_login");
            if (redirectURL) {
                sessionStorage.removeItem("redirect_after_login");
                window.location.href = redirectURL; // Redirect back to the post
            }
        });
    </script>
{% endblock %}

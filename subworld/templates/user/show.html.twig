{% extends 'base.html.twig' %}

{% block title %}
    {{ user.username }}'s Profile
{% endblock %}

{% block content %}
    <div class="max-w-2xl mx-auto mt-6 space-y-4 mb-6">

        <!-- User Details -->
        <div class="bg-white shadow-md rounded-lg p-4 flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-bold">{{ user.username }}</h1>
                <p class="text-sm text-gray-500 mt-1">Joined on {{ user.createdAt|date("F j, Y") }}</p>
            </div>
            
            {% if app.user and app.user.id == user.id %}
                <a href="/profile/edit" class="bg-blue-600 text-white px-4 py-1 rounded-lg hover:bg-blue-700">
                    Edit Profile
                </a>
            {% endif %}
        </div>

        <!-- User's Posts -->
        <h2 class="text-xl font-semibold mt-6">Posts</h2>

        <div id="loading" class="text-center text-gray-500">Loading posts...</div>
        <div id="posts" class="mt-4 space-y-4"></div>
        <p id="errorMessage" class="text-red-500 hidden mt-3"></p>

    </div>

    <script>
        async function fetchUserPosts() {
            const token = localStorage.getItem('jwt_token');
            const postsContainer = document.getElementById('posts');
            const loading = document.getElementById('loading');
            const errorMessage = document.getElementById('errorMessage');
        
            try {
                const response = await fetch('/api/posts/user/{{ user.id }}', {
                    headers: { 'Authorization': 'Bearer ' + token }
                });
        
                const data = await response.json();
        
                console.log('Fetched data:', data); // Log the fetched data
        
                if (response.ok) {
                    let html = '';
                    if (!Array.isArray(data.posts) || data.posts.length === 0) {
                        html = `<p class="text-gray-500">No posts found.</p>`;
                    } else {
                        data.posts.forEach(post => {
                            html += `
                                <div class="bg-white shadow-md rounded-lg p-4 flex">
                                    <!-- Voting System -->
                                    <div class="flex flex-col items-center pr-4">
                                        <button class="vote-button hover:scale-110 transition-transform" data-post-id="${post.id}" data-vote-value="1">
                                            <img src="{{ asset('assets/svg/shift.svg') }}" alt="Upvote" class="w-6 h-6">
                                        </button>
                                        <span id="vote-count-${post.id}" class="text-gray-700 font-semibold">${post.vote_count}</span>
                                        <button class="vote-button hover:scale-110 transition-transform" data-post-id="${post.id}" data-vote-value="-1">
                                            <img src="{{ asset('assets/svg/shift.svg') }}" alt="Downvote" class="w-6 h-6 rotate-180">
                                        </button>
                                    </div>

                                    <!-- Post Content -->
                                    <div class="w-full">
                                        <h2 class="text-lg font-bold text-gray-900">
                                            <a href="/post/${post.id}" class="hover:underline">${post.title}</a>
                                        </h2>

                                        <p class="text-sm text-gray-500">
                                            Posted in 
                                            <a href="/subworld/${post.subworld_id}" class="text-blue-600 hover:underline">${post.subworld}</a> 
                                            Â· ${new Date(post.createdAt).toLocaleDateString()}
                                        </p>

                                        <p class="mt-2 text-gray-800">
                                            ${post.content.length > 300 ? post.content.slice(0, 300) + '...' : post.content}
                                        </p>

                                        <div class="mt-3 flex items-center space-x-4">
                                            <a href="/post/${post.id}" class="flex items-center text-gray-600 hover:text-blue-600">
                                                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5h6m-6 4h6m-6 4h6m-6 4h6"></path>
                                                </svg>
                                                ${post.comment_count} Comments
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                    }
        
                    postsContainer.innerHTML = html;
                } else {
                    errorMessage.textContent = "Failed to fetch posts. Try again later.";
                    errorMessage.classList.remove("hidden");
                }
            } catch (error) {
                console.error('Error fetching posts:', error); // Log the error
                errorMessage.textContent = "Error loading posts.";
                errorMessage.classList.remove("hidden");
            } finally {
                loading.classList.add("hidden");
            }
        }
        
        fetchUserPosts();

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.vote-button').forEach(button => {
                    button.addEventListener('click', handleVote);
                });
        });

        async function handleVote(event) {
            const button = event.currentTarget;
            const postId = button.dataset.postId;
            const voteValue = button.dataset.voteValue;
            const token = localStorage.getItem('jwt_token');

            try {
                const response = await fetch(`/api/votes/post/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify({ value: parseInt(voteValue) })
                });

                const data = await response.json();

                if (response.ok) {
                    // Update the vote count in the UI
                    const voteCountElement = document.querySelector(`#vote-count-${postId}`);
                    voteCountElement.textContent = data.new_vote_count;

                    // Optionally, update the button states (e.g., highlight the selected vote)
                    updateVoteButtonStates(postId, data.user_vote);
                } else {
                    console.error('Failed to record vote:', data.error);
                }
            } catch (error) {
                console.error('Error recording vote:', error);
            }
        }

        function updateVoteButtonStates(postId, userVote) {
            const upvoteButton = document.querySelector(`.vote-button[data-post-id="${postId}"][data-vote-value="1"]`);
            const downvoteButton = document.querySelector(`.vote-button[data-post-id="${postId}"][data-vote-value="-1"]`);

            if (userVote === 1) {
                upvoteButton.classList.add('selected');
                downvoteButton.classList.remove('selected');
            } else if (userVote === -1) {
                upvoteButton.classList.remove('selected');
                downvoteButton.classList.add('selected');
            } else {
                upvoteButton.classList.remove('selected');
                downvoteButton.classList.remove('selected');
            }
        }

        function attachVoteListeners() {
            const token = localStorage.getItem("jwt_token");
            document.querySelectorAll(".vote-button").forEach(button => {
                button.addEventListener("click", async function () {
                    const postId = this.getAttribute("data-post-id");
                    const voteValue = parseInt(this.getAttribute("data-vote"));

                    const response = await fetch(`/api/votes/post/${postId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        },
                        body: JSON.stringify({ value: voteValue })
                    });

                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById(`vote-count-${postId}`).textContent = data.new_vote_count;
                    }
                });
            });
        }
    </script>
{% endblock %}

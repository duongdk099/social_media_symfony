{% extends 'base.html.twig' %}

{% block content %}
    <div class="max-w-2xl mx-auto mt-6 space-y-4">
        <div id="postsContainer"></div>

        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="text-center py-4 hidden">
            <svg class="animate-spin h-6 w-6 text-blue-600 mx-auto" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M4 12a8 8 0 018-8"></path>
            </svg>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        let currentPage = 1;
        let isLoading = false;


        document.addEventListener("DOMContentLoaded", function () {
            loadMorePosts();

            window.addEventListener("scroll", function () {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 50 && !isLoading) {
                    loadMorePosts();
                }
            });
        });

        async function loadMorePosts() {
            isLoading = true;
            document.getElementById("loadingIndicator").classList.remove("hidden");

            try {
                const response = await fetch(`/api/posts?page=${currentPage}`);
                const data = await response.json();

                if (response.ok) {
                    data.posts.forEach(post => {
                        document.getElementById("postsContainer").insertAdjacentHTML("beforeend", generatePostHTML(post));
                    });

                    currentPage++;
                    if (!data.has_more) {
                        window.removeEventListener("scroll", loadMorePosts);
                    }

                    attachVoteListeners();
                }
            } catch (error) {
                console.error("Error loading posts:", error);
            }

            document.getElementById("loadingIndicator").classList.add("hidden");
            isLoading = false;
        }

        function generatePostHTML(post) {
            const subworldLink = post.subworld_id ? 
                `<a href="/subworld/${post.subworld_id}" class="text-blue-600 hover:underline">${post.subworld_name}</a>` : 
                "Unknown Subworld";

            const userLink = post.user_id ? 
                `<a href="/user/${post.user_id}" class="text-blue-600 hover:underline">${post.user_name}</a>` : 
                "Unknown User";

            const upvoteClass = post.user_vote === 1 ? "text-green-500" : "text-gray-500";
            const downvoteClass = post.user_vote === -1 ? "text-red-500" : "text-gray-500";

            return `
                <div class="bg-white shadow-md rounded-lg p-4 flex mb-4">
                    <div class="flex flex-col items-center pr-4">
                        <button class="vote-button transition-transform hover:scale-110"
                            id="upvote-${post.id}" data-post-id="${post.id}" data-vote="1">
                            <svg class="w-6 h-6 transition-colors duration-200 ${upvoteClass}"
                                id="upvote-icon-${post.id}"
                                fill="none" stroke="currentColor" stroke-width="2"
                                viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M5 15l7-7 7 7"></path>
                            </svg>
                        </button>

                        <span id="vote-count-${post.id}" class="text-gray-700 font-semibold">${post.vote_count}</span>

                        <button class="vote-button transition-transform hover:scale-110"
                            id="downvote-${post.id}" data-post-id="${post.id}" data-vote="-1">
                            <svg class="w-6 h-6 transition-colors duration-200 rotate-180 ${downvoteClass}"
                                id="downvote-icon-${post.id}"
                                fill="none" stroke="currentColor" stroke-width="2"
                                viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M5 15l7-7 7 7"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="w-full">
                        <h2 class="text-lg font-bold text-gray-900">
                            <a href="/post/${post.id}" class="hover:underline">${post.title}</a>
                        </h2>
                        <p class="text-sm text-gray-500">
                            Posted in ${subworldLink} by ${userLink} Â· ${new Date(post.createdAt).toLocaleDateString()}
                        </p>
                        <p class="mt-2 text-gray-800">${post.content.length > 300 ? post.content.substring(0, 300) + '...' : post.content}</p>
                        <div class="mt-3 flex items-center space-x-4">
                            <a href="/post/${post.id}" class="flex items-center text-gray-600 hover:text-blue-600">
                                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5h6m-6 4h6m-6 4h6m-6 4h6"></path>
                                </svg>
                                ${post.comment_count} Comments
                            </a>
                        </div>
                    </div>
                </div>
            `;
        }

        function attachVoteListeners() {
            const token = localStorage.getItem("jwt_token");
            document.querySelectorAll(".vote-button").forEach(button => {
                button.addEventListener("click", async function () {
                    const postId = this.getAttribute("data-post-id");
                    const voteValue = parseInt(this.getAttribute("data-vote"));

                    const response = await fetch(`/api/votes/post/${postId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "Bearer " + token
                        },
                        body: JSON.stringify({ value: voteValue })
                    });

                    const data = await response.json();
                    if (response.ok) {
                        document.getElementById(`vote-count-${postId}`).textContent = data.new_vote_count;
                    }
                });
            });
        }
    </script>
{% endblock %}
